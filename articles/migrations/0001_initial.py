# Generated by Django 2.1.7 on 2019-05-31 15:39

from django.conf import settings
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arxiv_id', models.CharField(max_length=50)),
                ('version', models.CharField(max_length=10, verbose_name='Version')),
                ('title', models.CharField(max_length=1000, verbose_name='Title')),
                ('abstract', models.TextField(verbose_name='Abstract')),
                ('url', models.URLField(verbose_name='URL')),
                ('date', models.DateField()),
                ('category', models.CharField(max_length=100)),
                ('has_pdf', models.NullBooleanField(default=False)),
                ('has_txt', models.NullBooleanField(default=False)),
                ('has_inner_vector', models.BooleanField(default=False)),
                ('has_neighbors', models.BooleanField(default=False)),
                ('has_category_bar', models.BooleanField(default=False)),
                ('has_ngram_stat', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Article',
                'verbose_name_plural': 'Articles',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='ArticleUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(default='', verbose_name='Note')),
                ('like_dislike', models.NullBooleanField()),
                ('in_lib', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Author name')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(verbose_name='URL')),
                ('title', models.CharField(max_length=300, verbose_name='title')),
                ('rating', models.PositiveIntegerField(default=0, verbose_name='rating')),
                ('approved', models.BooleanField(default=False, verbose_name='approved')),
            ],
            options={
                'verbose_name': 'Blog post',
                'verbose_name_plural': 'Blog posts',
                'ordering': ['-rating'],
            },
        ),
        migrations.CreateModel(
            name='BlogPostUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_like', models.BooleanField(default=False, verbose_name='like')),
                ('blog_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.BlogPost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('category', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('category_full', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='CategoriesDate',
            fields=[
                ('date_code', models.IntegerField(primary_key=True, serialize=False)),
                ('date', models.CharField(max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='CategoriesVSDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('from_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.Categories')),
                ('from_month', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.CategoriesDate')),
            ],
        ),
        migrations.CreateModel(
            name='GitHubRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(verbose_name='URL')),
                ('title', models.CharField(max_length=300, verbose_name='title')),
                ('rating', models.PositiveIntegerField(default=0, verbose_name='rating')),
                ('n_stars', models.PositiveIntegerField(default=0, verbose_name='stars')),
                ('language', models.CharField(default='', max_length=100, verbose_name='language')),
                ('framework', models.CharField(default='', max_length=100, verbose_name='language')),
                ('languages', django.contrib.postgres.fields.hstore.HStoreField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='GithubRepoUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_like', models.BooleanField(default=False, verbose_name='like')),
                ('github_repo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.GitHubRepository')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NGramsMonth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=6)),
                ('label_code', models.IntegerField()),
                ('type', models.IntegerField()),
                ('sentences', django.contrib.postgres.fields.hstore.HStoreField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='UserTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', django.contrib.postgres.fields.hstore.HStoreField(default=dict)),
                ('n_articles', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ArticleText',
            fields=[
                ('article_origin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='articles.Article')),
                ('pdf_location', models.CharField(max_length=100)),
                ('txt_location', models.CharField(max_length=100)),
                ('text', models.CharField(max_length=100000)),
                ('tags', django.contrib.postgres.fields.hstore.HStoreField(default=dict)),
                ('tags_norm', models.IntegerField(default=0)),
                ('relations', django.contrib.postgres.fields.hstore.HStoreField(default=dict)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='ngramsmonth',
            unique_together={('type', 'label_code')},
        ),
        migrations.AddField(
            model_name='githubrepository',
            name='article',
            field=models.ForeignKey(on_delete='CASCADE', related_name='github_repos', to='articles.Article'),
        ),
        migrations.AddField(
            model_name='githubrepository',
            name='users',
            field=models.ManyToManyField(related_name='github_repos', through='articles.GithubRepoUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='githubrepository',
            name='who_added',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='added_github_repo', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='categoriesdate',
            name='category',
            field=models.ManyToManyField(through='articles.CategoriesVSDate', to='articles.Categories'),
        ),
        migrations.AddField(
            model_name='categories',
            name='month',
            field=models.ManyToManyField(through='articles.CategoriesVSDate', to='articles.CategoriesDate'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='article',
            field=models.ForeignKey(on_delete='CASCADE', related_name='blog_posts', to='articles.Article'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='users',
            field=models.ManyToManyField(related_name='blog_posts', through='articles.BlogPostUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='who_added',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='added_blog_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='author',
            name='articles',
            field=models.ManyToManyField(related_name='authors', to='articles.Article'),
        ),
        migrations.AddField(
            model_name='articleuser',
            name='article',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_user', to='articles.Article'),
        ),
        migrations.AddField(
            model_name='articleuser',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='article',
            name='users',
            field=models.ManyToManyField(related_name='articles', through='articles.ArticleUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='githubrepouser',
            unique_together={('github_repo', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='categoriesvsdate',
            unique_together={('from_category', 'from_month')},
        ),
        migrations.AlterUniqueTogether(
            name='blogpostuser',
            unique_together={('blog_post', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='articleuser',
            unique_together={('article', 'user')},
        ),
    ]
